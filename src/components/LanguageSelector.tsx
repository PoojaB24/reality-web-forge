
import { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Check, X } from 'lucide-react';

interface LanguageSelectorProps {
  onClose: () => void;
}

interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
}

const languages: Language[] = [
  { code: 'en', name: 'English', nativeName: 'English', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'hi', name: 'Hindi', nativeName: 'рд╣рд┐рдиреНрджреА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'bn', name: 'Bengali', nativeName: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'te', name: 'Telugu', nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'mr', name: 'Marathi', nativeName: 'рдорд░рд╛рдареА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'ta', name: 'Tamil', nativeName: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'gu', name: 'Gujarati', nativeName: 'ркЧрлБркЬрк░рк╛ркдрлА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'kn', name: 'Kannada', nativeName: 'р▓Хр▓ир│Нр▓ир▓б', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'ml', name: 'Malayalam', nativeName: 'р┤ор┤▓р┤пр┤╛р┤│р┤В', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'pa', name: 'Punjabi', nativeName: 'рикрй░риЬри╛римрйА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'or', name: 'Odia', nativeName: 'рмУрмбрм╝рм┐рмЖ', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'as', name: 'Assamese', nativeName: 'ржЕрж╕ржорзАржпрж╝рж╛', flag: 'ЁЯЗоЁЯЗ│' },
];

// Translation map for basic UI elements
const translations: Record<string, Record<string, string>> = {
  en: {
    selectLanguage: 'Select Language',
    close: 'Close language selector',
    currently: 'Currently',
    apply: 'Apply',
    languageSupport: 'Language support coming soon for all Indian languages',
    ecoCartIndia: 'EcoCart India',
    ecoFriendlyProducts: 'Eco-Friendly Indian Products',
    discoverProducts: 'Discover authentic Indian eco-friendly products from trusted brands',
    searchPlaceholder: 'Search for Indian products (e.g., Masala Chai, Basmati Rice, Neem Face Wash)...',
    addToCart: 'Add to Cart',
    viewDetails: 'View Details',
    help: 'Help',
    cart: 'Cart',
    signIn: 'Sign In'
  },
  hi: {
    selectLanguage: 'рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ',
    close: 'рднрд╛рд╖рд╛ рдЪрдпрдирдХрд░реНрддрд╛ рдмрдВрдж рдХрд░реЗрдВ',
    currently: 'рд╡рд░реНрддрдорд╛рди рдореЗрдВ',
    apply: 'рд▓рд╛рдЧреВ рдХрд░реЗрдВ',
    languageSupport: 'рд╕рднреА рднрд╛рд░рддреАрдп рднрд╛рд╖рд╛рдУрдВ рдХреЗ рд▓рд┐рдП рднрд╛рд╖рд╛ рд╕рдорд░реНрдерди рдЬрд▓реНрдж рдЖ рд░рд╣рд╛ рд╣реИ',
    ecoCartIndia: 'рдЗрдХреЛрдХрд╛рд░реНрдЯ рднрд╛рд░рдд',
    ecoFriendlyProducts: 'рдкрд░реНрдпрд╛рд╡рд░рдг рдЕрдиреБрдХреВрд▓ рднрд╛рд░рддреАрдп рдЙрддреНрдкрд╛рдж',
    discoverProducts: 'рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рдмреНрд░рд╛рдВрдбреЛрдВ рд╕реЗ рдкреНрд░рд╛рдорд╛рдгрд┐рдХ рднрд╛рд░рддреАрдп рдкрд░реНрдпрд╛рд╡рд░рдг рдЕрдиреБрдХреВрд▓ рдЙрддреНрдкрд╛рджреЛрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВ',
    searchPlaceholder: 'рднрд╛рд░рддреАрдп рдЙрддреНрдкрд╛рджреЛрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВ (рдЬреИрд╕реЗ, рдорд╕рд╛рд▓рд╛ рдЪрд╛рдп, рдмрд╛рд╕рдорддреА рдЪрд╛рд╡рд▓, рдиреАрдо рдлреЗрд╕ рд╡рд╛рд╢)...',
    addToCart: 'рдХрд╛рд░реНрдЯ рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ',
    viewDetails: 'рд╡рд┐рд╡рд░рдг рджреЗрдЦреЗрдВ',
    help: 'рд╕рд╣рд╛рдпрддрд╛',
    cart: 'рдХрд╛рд░реНрдЯ',
    signIn: 'рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ'
  },
  bn: {
    selectLanguage: 'ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи',
    close: 'ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржХ ржмржирзНржз ржХрж░рзБржи',
    currently: 'ржмрж░рзНрждржорж╛ржирзЗ',
    apply: 'ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рзБржи',
    languageSupport: 'рж╕ржорж╕рзНржд ржнрж╛рж░рждрзАржпрж╝ ржнрж╛рж╖рж╛рж░ ржЬржирзНржп ржнрж╛рж╖рж╛ рж╕рж╣рж╛ржпрж╝рждрж╛ рж╢рзАржШрзНрж░ржЗ ржЖрж╕ржЫрзЗ',
    ecoCartIndia: 'ржЗржХрзЛржХрж╛рж░рзНржЯ ржЗржирзНржбрж┐ржпрж╝рж╛',
    ecoFriendlyProducts: 'ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржнрж╛рж░рждрзАржпрж╝ ржкржгрзНржп',
    discoverProducts: 'ржмрж┐рж╢рзНржмрж╕рзНржд ржмрзНрж░рзНржпрж╛ржирзНржбржЧрзБрж▓рж┐ ржерзЗржХрзЗ ржЦрж╛ржБржЯрж┐ ржнрж╛рж░рждрзАржпрж╝ ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржкржгрзНржпржЧрзБрж▓рж┐ ржЖржмрж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржи',
    searchPlaceholder: 'ржнрж╛рж░рждрзАржпрж╝ ржкржгрзНржп ржЦрзБржБржЬрзБржи (ржпрзЗржоржи, ржорж╕рж▓рж╛ ржЪрж╛, ржмрж╛рж╕ржорждрзА ржЪрж╛рж▓, ржирж┐ржо ржлрзЗрж╕ ржУржпрж╝рж╛рж╢)...',
    addToCart: 'ржХрж╛рж░рзНржЯрзЗ ржпрзЛржЧ ржХрж░рзБржи',
    viewDetails: 'ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржжрзЗржЦрзБржи',
    help: 'рж╕рж╛рж╣рж╛ржпрзНржп',
    cart: 'ржХрж╛рж░рзНржЯ',
    signIn: 'рж╕рж╛ржЗржи ржЗржи ржХрж░рзБржи'
  }
};

const LanguageSelector = ({ onClose }: LanguageSelectorProps) => {
  const [selectedLanguage, setSelectedLanguage] = useState(() => {
    return localStorage.getItem('selectedLanguage') || 'en';
  });

  const currentTranslations = translations[selectedLanguage] || translations.en;

  const handleLanguageSelect = (languageCode: string) => {
    setSelectedLanguage(languageCode);
    
    // Store the selected language in localStorage
    localStorage.setItem('selectedLanguage', languageCode);
    
    // Update document language
    document.documentElement.lang = languageCode;
    
    // Dispatch custom event to notify other components
    window.dispatchEvent(new CustomEvent('languageChange', { 
      detail: { language: languageCode } 
    }));
    
    console.log('Language selected:', languageCode);
  };

  const handleApply = () => {
    // Force page refresh to apply language changes
    window.location.reload();
  };

  return (
    <Card className="w-80 max-h-96 overflow-y-auto bg-white shadow-xl border-green-200">
      <CardContent className="p-0">
        <div className="sticky top-0 bg-white border-b border-green-100 p-4 flex justify-between items-center">
          <h3 className="font-semibold text-lg">{currentTranslations.selectLanguage}</h3>
          <Button
            onClick={onClose}
            variant="ghost"
            size="icon"
            aria-label={currentTranslations.close}
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
        
        <div className="p-2">
          {languages.map((language) => (
            <Button
              key={language.code}
              onClick={() => handleLanguageSelect(language.code)}
              variant="ghost"
              className={`w-full justify-start p-3 mb-1 hover:bg-green-50 ${
                selectedLanguage === language.code ? 'bg-green-100 text-green-800' : ''
              }`}
              aria-label={`Select ${language.name} language`}
            >
              <div className="flex items-center justify-between w-full">
                <div className="flex items-center space-x-3">
                  <span className="text-xl" aria-hidden="true">{language.flag}</span>
                  <div className="text-left">
                    <div className="font-medium">{language.name}</div>
                    <div className="text-sm text-gray-600">{language.nativeName}</div>
                  </div>
                </div>
                {selectedLanguage === language.code && (
                  <Check className="h-4 w-4 text-green-600" aria-label="Selected" />
                )}
              </div>
            </Button>
          ))}
        </div>
        
        <div className="border-t border-green-100 p-4">
          <div className="flex items-center justify-between">
            <Badge variant="outline" className="text-xs">
              {currentTranslations.currently}: {languages.find(l => l.code === selectedLanguage)?.name}
            </Badge>
            <Button
              onClick={handleApply}
              className="bg-green-600 hover:bg-green-700 text-white"
              aria-label="Apply language selection"
            >
              {currentTranslations.apply}
            </Button>
          </div>
          <p className="text-xs text-gray-500 mt-2">
            {currentTranslations.languageSupport}
          </p>
        </div>
      </CardContent>
    </Card>
  );
};

export default LanguageSelector;
